/*
 * Generated by gdbus-codegen 2.36.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __OSTREE_DAEMON_GENERATED_H__
#define __OSTREE_DAEMON_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.OSTree */

#define OTD_TYPE_OSTREE (otd_ostree_get_type ())
#define OTD_OSTREE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OTD_TYPE_OSTREE, OTDOSTree))
#define OTD_IS_OSTREE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OTD_TYPE_OSTREE))
#define OTD_OSTREE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), OTD_TYPE_OSTREE, OTDOSTreeIface))

struct _OTDOSTree;
typedef struct _OTDOSTree OTDOSTree;
typedef struct _OTDOSTreeIface OTDOSTreeIface;

struct _OTDOSTreeIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_apply) (
    OTDOSTree *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_fetch) (
    OTDOSTree *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_poll) (
    OTDOSTree *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_branch) (OTDOSTree *object);

  const gchar * (*get_current_id) (OTDOSTree *object);

  gint64  (*get_download_size) (OTDOSTree *object);

  gint64  (*get_downloaded_bytes) (OTDOSTree *object);

  guint  (*get_error_code) (OTDOSTree *object);

  const gchar * (*get_error_message) (OTDOSTree *object);

  gint64  (*get_full_download_size) (OTDOSTree *object);

  gint64  (*get_full_unpacked_size) (OTDOSTree *object);

  const gchar * (*get_remote) (OTDOSTree *object);

  guint  (*get_state) (OTDOSTree *object);

  gint64  (*get_unpacked_size) (OTDOSTree *object);

  const gchar * (*get_update_id) (OTDOSTree *object);

  const gchar * (*get_update_label) (OTDOSTree *object);

  const gchar * (*get_update_message) (OTDOSTree *object);

  void (*progress) (
    OTDOSTree *object,
    gint64 arg_fetched,
    gint64 arg_expected);

  void (*state_changed) (
    OTDOSTree *object,
    guint arg_state);

};

GType otd_ostree_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *otd_ostree_interface_info (void);
guint otd_ostree_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void otd_ostree_complete_poll (
    OTDOSTree *object,
    GDBusMethodInvocation *invocation);

void otd_ostree_complete_fetch (
    OTDOSTree *object,
    GDBusMethodInvocation *invocation);

void otd_ostree_complete_apply (
    OTDOSTree *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void otd_ostree_emit_state_changed (
    OTDOSTree *object,
    guint arg_state);

void otd_ostree_emit_progress (
    OTDOSTree *object,
    gint64 arg_fetched,
    gint64 arg_expected);



/* D-Bus method calls: */
void otd_ostree_call_poll (
    OTDOSTree *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean otd_ostree_call_poll_finish (
    OTDOSTree *proxy,
    GAsyncResult *res,
    GError **error);

gboolean otd_ostree_call_poll_sync (
    OTDOSTree *proxy,
    GCancellable *cancellable,
    GError **error);

void otd_ostree_call_fetch (
    OTDOSTree *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean otd_ostree_call_fetch_finish (
    OTDOSTree *proxy,
    GAsyncResult *res,
    GError **error);

gboolean otd_ostree_call_fetch_sync (
    OTDOSTree *proxy,
    GCancellable *cancellable,
    GError **error);

void otd_ostree_call_apply (
    OTDOSTree *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean otd_ostree_call_apply_finish (
    OTDOSTree *proxy,
    GAsyncResult *res,
    GError **error);

gboolean otd_ostree_call_apply_sync (
    OTDOSTree *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint otd_ostree_get_state (OTDOSTree *object);
void otd_ostree_set_state (OTDOSTree *object, guint value);

const gchar *otd_ostree_get_update_id (OTDOSTree *object);
gchar *otd_ostree_dup_update_id (OTDOSTree *object);
void otd_ostree_set_update_id (OTDOSTree *object, const gchar *value);

const gchar *otd_ostree_get_current_id (OTDOSTree *object);
gchar *otd_ostree_dup_current_id (OTDOSTree *object);
void otd_ostree_set_current_id (OTDOSTree *object, const gchar *value);

const gchar *otd_ostree_get_branch (OTDOSTree *object);
gchar *otd_ostree_dup_branch (OTDOSTree *object);
void otd_ostree_set_branch (OTDOSTree *object, const gchar *value);

const gchar *otd_ostree_get_remote (OTDOSTree *object);
gchar *otd_ostree_dup_remote (OTDOSTree *object);
void otd_ostree_set_remote (OTDOSTree *object, const gchar *value);

const gchar *otd_ostree_get_update_label (OTDOSTree *object);
gchar *otd_ostree_dup_update_label (OTDOSTree *object);
void otd_ostree_set_update_label (OTDOSTree *object, const gchar *value);

const gchar *otd_ostree_get_update_message (OTDOSTree *object);
gchar *otd_ostree_dup_update_message (OTDOSTree *object);
void otd_ostree_set_update_message (OTDOSTree *object, const gchar *value);

gint64 otd_ostree_get_download_size (OTDOSTree *object);
void otd_ostree_set_download_size (OTDOSTree *object, gint64 value);

gint64 otd_ostree_get_downloaded_bytes (OTDOSTree *object);
void otd_ostree_set_downloaded_bytes (OTDOSTree *object, gint64 value);

gint64 otd_ostree_get_unpacked_size (OTDOSTree *object);
void otd_ostree_set_unpacked_size (OTDOSTree *object, gint64 value);

gint64 otd_ostree_get_full_download_size (OTDOSTree *object);
void otd_ostree_set_full_download_size (OTDOSTree *object, gint64 value);

gint64 otd_ostree_get_full_unpacked_size (OTDOSTree *object);
void otd_ostree_set_full_unpacked_size (OTDOSTree *object, gint64 value);

guint otd_ostree_get_error_code (OTDOSTree *object);
void otd_ostree_set_error_code (OTDOSTree *object, guint value);

const gchar *otd_ostree_get_error_message (OTDOSTree *object);
gchar *otd_ostree_dup_error_message (OTDOSTree *object);
void otd_ostree_set_error_message (OTDOSTree *object, const gchar *value);


/* ---- */

#define OTD_TYPE_OSTREE_PROXY (otd_ostree_proxy_get_type ())
#define OTD_OSTREE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OTD_TYPE_OSTREE_PROXY, OTDOSTreeProxy))
#define OTD_OSTREE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OTD_TYPE_OSTREE_PROXY, OTDOSTreeProxyClass))
#define OTD_OSTREE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OTD_TYPE_OSTREE_PROXY, OTDOSTreeProxyClass))
#define OTD_IS_OSTREE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OTD_TYPE_OSTREE_PROXY))
#define OTD_IS_OSTREE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OTD_TYPE_OSTREE_PROXY))

typedef struct _OTDOSTreeProxy OTDOSTreeProxy;
typedef struct _OTDOSTreeProxyClass OTDOSTreeProxyClass;
typedef struct _OTDOSTreeProxyPrivate OTDOSTreeProxyPrivate;

struct _OTDOSTreeProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OTDOSTreeProxyPrivate *priv;
};

struct _OTDOSTreeProxyClass
{
  GDBusProxyClass parent_class;
};

GType otd_ostree_proxy_get_type (void) G_GNUC_CONST;

void otd_ostree_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OTDOSTree *otd_ostree_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OTDOSTree *otd_ostree_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void otd_ostree_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OTDOSTree *otd_ostree_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OTDOSTree *otd_ostree_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define OTD_TYPE_OSTREE_SKELETON (otd_ostree_skeleton_get_type ())
#define OTD_OSTREE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OTD_TYPE_OSTREE_SKELETON, OTDOSTreeSkeleton))
#define OTD_OSTREE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OTD_TYPE_OSTREE_SKELETON, OTDOSTreeSkeletonClass))
#define OTD_OSTREE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OTD_TYPE_OSTREE_SKELETON, OTDOSTreeSkeletonClass))
#define OTD_IS_OSTREE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OTD_TYPE_OSTREE_SKELETON))
#define OTD_IS_OSTREE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OTD_TYPE_OSTREE_SKELETON))

typedef struct _OTDOSTreeSkeleton OTDOSTreeSkeleton;
typedef struct _OTDOSTreeSkeletonClass OTDOSTreeSkeletonClass;
typedef struct _OTDOSTreeSkeletonPrivate OTDOSTreeSkeletonPrivate;

struct _OTDOSTreeSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OTDOSTreeSkeletonPrivate *priv;
};

struct _OTDOSTreeSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType otd_ostree_skeleton_get_type (void) G_GNUC_CONST;

OTDOSTree *otd_ostree_skeleton_new (void);


/* ---- */

#define OTD_TYPE_OBJECT (otd_object_get_type ())
#define OTD_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OTD_TYPE_OBJECT, OTDObject))
#define OTD_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OTD_TYPE_OBJECT))
#define OTD_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), OTD_TYPE_OBJECT, OTDObject))

struct _OTDObject;
typedef struct _OTDObject OTDObject;
typedef struct _OTDObjectIface OTDObjectIface;

struct _OTDObjectIface
{
  GTypeInterface parent_iface;
};

GType otd_object_get_type (void) G_GNUC_CONST;

OTDOSTree *otd_object_get_ostree (OTDObject *object);
OTDOSTree *otd_object_peek_ostree (OTDObject *object);

#define OTD_TYPE_OBJECT_PROXY (otd_object_proxy_get_type ())
#define OTD_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OTD_TYPE_OBJECT_PROXY, OTDObjectProxy))
#define OTD_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OTD_TYPE_OBJECT_PROXY, OTDObjectProxyClass))
#define OTD_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OTD_TYPE_OBJECT_PROXY, OTDObjectProxyClass))
#define OTD_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OTD_TYPE_OBJECT_PROXY))
#define OTD_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OTD_TYPE_OBJECT_PROXY))

typedef struct _OTDObjectProxy OTDObjectProxy;
typedef struct _OTDObjectProxyClass OTDObjectProxyClass;
typedef struct _OTDObjectProxyPrivate OTDObjectProxyPrivate;

struct _OTDObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  OTDObjectProxyPrivate *priv;
};

struct _OTDObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType otd_object_proxy_get_type (void) G_GNUC_CONST;
OTDObjectProxy *otd_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define OTD_TYPE_OBJECT_SKELETON (otd_object_skeleton_get_type ())
#define OTD_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OTD_TYPE_OBJECT_SKELETON, OTDObjectSkeleton))
#define OTD_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OTD_TYPE_OBJECT_SKELETON, OTDObjectSkeletonClass))
#define OTD_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OTD_TYPE_OBJECT_SKELETON, OTDObjectSkeletonClass))
#define OTD_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OTD_TYPE_OBJECT_SKELETON))
#define OTD_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OTD_TYPE_OBJECT_SKELETON))

typedef struct _OTDObjectSkeleton OTDObjectSkeleton;
typedef struct _OTDObjectSkeletonClass OTDObjectSkeletonClass;
typedef struct _OTDObjectSkeletonPrivate OTDObjectSkeletonPrivate;

struct _OTDObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  OTDObjectSkeletonPrivate *priv;
};

struct _OTDObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType otd_object_skeleton_get_type (void) G_GNUC_CONST;
OTDObjectSkeleton *otd_object_skeleton_new (const gchar *object_path);
void otd_object_skeleton_set_ostree (OTDObjectSkeleton *object, OTDOSTree *interface_);

/* ---- */

#define OTD_TYPE_OBJECT_MANAGER_CLIENT (otd_object_manager_client_get_type ())
#define OTD_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OTD_TYPE_OBJECT_MANAGER_CLIENT, OTDObjectManagerClient))
#define OTD_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OTD_TYPE_OBJECT_MANAGER_CLIENT, OTDObjectManagerClientClass))
#define OTD_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OTD_TYPE_OBJECT_MANAGER_CLIENT, OTDObjectManagerClientClass))
#define OTD_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OTD_TYPE_OBJECT_MANAGER_CLIENT))
#define OTD_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OTD_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _OTDObjectManagerClient OTDObjectManagerClient;
typedef struct _OTDObjectManagerClientClass OTDObjectManagerClientClass;
typedef struct _OTDObjectManagerClientPrivate OTDObjectManagerClientPrivate;

struct _OTDObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  OTDObjectManagerClientPrivate *priv;
};

struct _OTDObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType otd_object_manager_client_get_type (void) G_GNUC_CONST;

GType otd_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void otd_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *otd_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *otd_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void otd_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *otd_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *otd_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __OSTREE_DAEMON_GENERATED_H__ */
